{"version":3,"sources":["App.tsx","index.tsx"],"names":["moods","id","name","pokemon","emoji","color","imageUrl","App","selectedMood","setSelectedMood","useState","moodHistory","setMoodHistory","currentNote","setCurrentNote","currentStreak","setCurrentStreak","longestStreak","setLongestStreak","useEffect","savedHistory","localStorage","getItem","savedCurrentStreak","savedLongestStreak","JSON","parse","parseInt","todaysEntry","getTodaysEntry","today","Date","toISOString","split","find","entry","date","weeklyStats","getWeeklyStats","oneWeekAgo","setDate","getDate","weeklyEntries","filter","moodCounts","forEach","mood","moodEntries","Object","entries","mostCommonMood","length","reduce","max","current","totalEntries","uniqueDays","Array","from","Set","map","_jsxs","className","children","_jsx","onClick","handleMoodSelect","style","borderColor","src","alt","loading","value","onChange","e","target","placeholder","rows","saveMoodEntry","note","newHistory","streaks","history","longest","sortedHistory","sort","a","b","getTime","yesterday","now","tempStreak","hasLoggedToday","some","hasLoggedYesterday","uniqueDates","i","currentDate","expectedDate","prevDate","currDate","Math","calculateStreaks","setItem","stringify","toString","slice","reverse","index","toLocaleDateString","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.807512bd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ninterface Mood {\n  id: string;\n  name: string;\n  pokemon: string;\n  emoji: string;\n  color: string;\n  imageUrl: string;\n}\n\nconst moods: Mood[] = [\n  { \n    id: '1', \n    name: 'Happy', \n    pokemon: 'Pikachu', \n    emoji: '😊', \n    color: '#FFD700',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/25.png'\n  },\n  { \n    id: '2', \n    name: 'Excited', \n    pokemon: 'Eevee', \n    emoji: '🤩', \n    color: '#FF6B6B',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/133.png'\n  },\n  { \n    id: '3', \n    name: 'Calm', \n    pokemon: 'Snorlax', \n    emoji: '😌', \n    color: '#4ECDC4',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/143.png'\n  },\n  { \n    id: '4', \n    name: 'Sad', \n    pokemon: 'Psyduck', \n    emoji: '😢', \n    color: '#95A5A6',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/54.png'\n  },\n  { \n    id: '5', \n    name: 'Angry', \n    pokemon: 'Charmander', \n    emoji: '😠', \n    color: '#E74C3C',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/4.png'\n  },\n  { \n    id: '6', \n    name: 'Anxious', \n    pokemon: 'Meowth', \n    emoji: '😰', \n    color: '#7B1FA2',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/52.png'\n  },\n  { \n    id: '7', \n    name: 'Tired', \n    pokemon: 'Slowpoke', \n    emoji: '😴', \n    color: '#34495E',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/79.png'\n  },\n  { \n    id: '8', \n    name: 'Energetic', \n    pokemon: 'Jolteon', \n    emoji: '⚡', \n    color: '#F39C12',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/135.png'\n  },\n  { \n    id: '9', \n    name: 'Dreamy', \n    pokemon: 'Clefairy', \n    emoji: '🌙', \n    color: '#FF69B4',\n    imageUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/35.png'\n  }\n];\n\ninterface MoodEntry {\n  mood: Mood;\n  date: string;\n  note: string;\n}\n\nfunction App() {\n  const [selectedMood, setSelectedMood] = useState<Mood | null>(null);\n  const [moodHistory, setMoodHistory] = useState<MoodEntry[]>([]);\n  const [currentNote, setCurrentNote] = useState('');\n  const [currentStreak, setCurrentStreak] = useState(0);\n  const [longestStreak, setLongestStreak] = useState(0);\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const savedHistory = localStorage.getItem('pokemonMoodHistory');\n    const savedCurrentStreak = localStorage.getItem('currentStreak');\n    const savedLongestStreak = localStorage.getItem('longestStreak');\n\n    if (savedHistory) {\n      setMoodHistory(JSON.parse(savedHistory));\n    }\n    if (savedCurrentStreak) {\n      setCurrentStreak(parseInt(savedCurrentStreak));\n    }\n    if (savedLongestStreak) {\n      setLongestStreak(parseInt(savedLongestStreak));\n    }\n  }, []);\n\n  // Calculate streaks\n  const calculateStreaks = (history: MoodEntry[]) => {\n    if (history.length === 0) return { current: 0, longest: 0 };\n\n    const sortedHistory = [...history].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    const today = new Date().toISOString().split('T')[0];\n    const yesterday = new Date(Date.now() - 86400000).toISOString().split('T')[0];\n\n    let current = 0;\n    let longest = 0;\n    let tempStreak = 0;\n\n    // Check if user logged today or yesterday to continue streak\n    const hasLoggedToday = sortedHistory.some(entry => entry.date === today);\n    const hasLoggedYesterday = sortedHistory.some(entry => entry.date === yesterday);\n\n    if (hasLoggedToday || hasLoggedYesterday) {\n      const uniqueDates = Array.from(new Set(sortedHistory.map(entry => entry.date))).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());\n\n      for (let i = 0; i < uniqueDates.length; i++) {\n        const currentDate = new Date(uniqueDates[i]);\n        const expectedDate = new Date(today);\n        expectedDate.setDate(expectedDate.getDate() - i);\n\n        if (currentDate.toISOString().split('T')[0] === expectedDate.toISOString().split('T')[0]) {\n          current++;\n        } else {\n          break;\n        }\n      }\n\n      // Calculate longest streak\n      tempStreak = 1;\n      for (let i = 1; i < uniqueDates.length; i++) {\n        const prevDate = new Date(uniqueDates[i - 1]);\n        const currDate = new Date(uniqueDates[i]);\n        const dayDiff = (prevDate.getTime() - currDate.getTime()) / (1000 * 60 * 60 * 24);\n\n        if (dayDiff === 1) {\n          tempStreak++;\n          longest = Math.max(longest, tempStreak);\n        } else {\n          tempStreak = 1;\n        }\n      }\n      longest = Math.max(longest, tempStreak, current);\n    }\n\n    return { current, longest };\n  };\n\n  const handleMoodSelect = (mood: Mood) => {\n    setSelectedMood(mood);\n  };\n\n  const saveMoodEntry = () => {\n    if (selectedMood) {\n      const entry: MoodEntry = {\n        mood: selectedMood,\n        date: new Date().toISOString().split('T')[0],\n        note: currentNote\n      };\n\n      const newHistory = [...moodHistory, entry];\n      setMoodHistory(newHistory);\n\n      // Calculate and update streaks\n      const streaks = calculateStreaks(newHistory);\n      setCurrentStreak(streaks.current);\n      setLongestStreak(streaks.longest);\n\n      // Save to localStorage\n      localStorage.setItem('pokemonMoodHistory', JSON.stringify(newHistory));\n      localStorage.setItem('currentStreak', streaks.current.toString());\n      localStorage.setItem('longestStreak', streaks.longest.toString());\n\n      setSelectedMood(null);\n      setCurrentNote('');\n    }\n  };\n\n  const getTodaysEntry = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return moodHistory.find(entry => entry.date === today);\n  };\n\n  const getWeeklyStats = () => {\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n    const weeklyEntries = moodHistory.filter(entry => \n      new Date(entry.date) >= oneWeekAgo\n    );\n\n    const moodCounts: Record<string, number> = {};\n    weeklyEntries.forEach(entry => {\n      moodCounts[entry.mood.name] = (moodCounts[entry.mood.name] || 0) + 1;\n    });\n\n    const moodEntries = Object.entries(moodCounts);\n    const mostCommonMood = moodEntries.length > 0 \n      ? moodEntries.reduce((max, current) => current[1] > max[1] ? current : max)\n      : null;\n\n    return {\n      totalEntries: weeklyEntries.length,\n      mostCommonMood: mostCommonMood ? mostCommonMood[0] : 'None',\n      uniqueDays: Array.from(new Set(weeklyEntries.map(entry => entry.date))).length\n    };\n  };\n\n  const todaysEntry = getTodaysEntry();\n  const weeklyStats = getWeeklyStats();\n\n  return (\n    <div className=\"App\">\n      <div className=\"floating-decorations\">\n        <div className=\"floating-heart\">🍃</div>\n        <div className=\"floating-star\">🌟</div>\n        <div className=\"floating-sparkle\">✨</div>\n        <div className=\"floating-flower\">🌸</div>\n        <div className=\"floating-rainbow\">🦋</div>\n      </div>\n      <header className=\"App-header\">\n        <h1>✦ Mewd ✦</h1>\n        <p>Discover your emotions with magical companions</p>\n\n        {/* Daily Tracker Stats */}\n        <div className=\"daily-stats\">\n          <div className=\"stat-card\">\n            <div className=\"stat-number\">{currentStreak}</div>\n            <div className=\"stat-label\">Current Streak</div>\n          </div>\n          <div className=\"stat-card\">\n            <div className=\"stat-number\">{longestStreak}</div>\n            <div className=\"stat-label\">Longest Streak</div>\n          </div>\n          <div className=\"stat-card\">\n            <div className=\"stat-number\">{weeklyStats.uniqueDays}/7</div>\n            <div className=\"stat-label\">This Week</div>\n          </div>\n          <div className=\"stat-card\">\n            <div className=\"stat-number\">{moodHistory.length}</div>\n            <div className=\"stat-label\">Total Entries</div>\n          </div>\n        </div>\n\n        {todaysEntry && (\n          <div className=\"todays-mood\">\n            <p>✨ Today's mood: <strong>{todaysEntry.mood.name}</strong> with {todaysEntry.mood.pokemon}!</p>\n          </div>\n        )}\n      </header>\n      <main className=\"mood-tracker\">\n        <div className=\"mood-selection\">\n          <h2>{todaysEntry ? \"Update Today's Mood\" : \"How are you feeling today?\"}</h2>\n          <div className=\"mood-grid\">\n            {moods.map((mood) => (\n              <button\n                key={mood.id}\n                className=\"mood-card\"\n                data-mood={mood.name}\n                onClick={() => handleMoodSelect(mood)}\n                style={{ borderColor: mood.color }}\n              >\n                <img \n                  src={mood.imageUrl} \n                  alt={mood.pokemon}\n                  className=\"pokemon-image\"\n                  loading=\"lazy\"\n                />\n                <div className=\"mood-name\">{mood.name}</div>\n                <div className=\"mood-pokemon\">{mood.pokemon}</div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {selectedMood && (\n          <div className=\"mood-entry\">\n            <div className=\"selected-mood-display\">\n              <img \n                src={selectedMood.imageUrl} \n                alt={selectedMood.pokemon}\n                className=\"selected-pokemon-image\"\n              />\n              <div>\n                <h3>You selected: {selectedMood.name}</h3>\n                <p>with your companion {selectedMood.pokemon}!</p>\n              </div>\n            </div>\n            <textarea\n              value={currentNote}\n              onChange={(e) => setCurrentNote(e.target.value)}\n              placeholder=\"Add a note about your mood and what happened today...\"\n              rows={4}\n            />\n            <button onClick={saveMoodEntry} className=\"save-button\">\n              {todaysEntry ? \"Update Today's Entry\" : \"Save Mood Entry\"}\n            </button>\n          </div>\n        )}\n\n        {moodHistory.length > 0 && (\n          <div className=\"mood-history\">\n            <h3>Your Mood Journey</h3>\n            <div className=\"weekly-summary\">\n              <p>This week's favorite mood: <strong>{weeklyStats.mostCommonMood}</strong></p>\n            </div>\n            <div className=\"history-list\">\n              {moodHistory.slice(-10).reverse().map((entry, index) => (\n                <div key={index} className=\"history-entry\">\n                  <img \n                    src={entry.mood.imageUrl} \n                    alt={entry.mood.pokemon}\n                    className=\"history-pokemon-image\"\n                  />\n                  <div className=\"history-content\">\n                    <div className=\"history-header\">\n                      <span className=\"history-date\">{new Date(entry.date).toLocaleDateString()}</span>\n                      <span className=\"history-mood\" style={{ color: entry.mood.color }}>\n                        {entry.mood.name} with {entry.mood.pokemon}\n                      </span>\n                    </div>\n                    {entry.note && <span className=\"history-note\">\"{entry.note}\"</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}